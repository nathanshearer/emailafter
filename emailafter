#!/usr/bin/env bash

NAME="emailafter"
CODENAME="emailafter"
COPYRIGHT="Copyright (C) 2018 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="1.1.0.0"

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function emailafter_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			echo "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

# \brief Displays the help and exits the program
function emailafter_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	echo "Description:"
	echo "  Send an email after running a command."
	echo
	echo "Usage:"
	echo "  $CODENAME [options] mail@example.com command [args]"
	echo
	echo "Options:"
	echo "  -h, --help"
	echo "    Display this help message and exit."
	echo "  -p, --pretend"
	echo "    Print out the e-mail address and the command that would be executed."
	echo
	echo "Examples:"
	echo "  $CODENAME -p mail@example.com du --apparent-size -b -l -x /mnt/storage"
	echo "  $CODENAME mail@example.com cp -afv /mnt/storage /mnt/backup"
	echo "  $CODENAME mail@example.com 7z a /mnt/offsite/storage.7z /mnt/backup/storage"
	echo
	echo "Version:"
	echo "  $NAME $VERSION"
	echo "  $COPYRIGHT"
	echo "  Licensed under $LICENSE"
	exit
}

#------------------------------------------------------------------------------
# command line arguments
#

if [ $# -eq 0 -o "$1" = "-h" -o "$1" = "--help" ]; then
	emailafter_help
fi

if [ "$1" = "-p" -o "$1" = "--pretend" ]; then
	shift
	EMAIL="$1"
	shift
	echo "E-Mail Address: $EMAIL"
	echo "$@"
	exit
fi

EMAIL="$1"
shift

#------------------------------------------------------------------------------
# prepare environment
#

emailafter_check_dependencies hostname mail stdbuf
TMP="/tmp/$CODENAME.$$"
mkdir -p "$TMP"

#------------------------------------------------------------------------------
# begin execution
#

mkfifo "$TMP"/stdout
mkfifo "$TMP"/stderr
touch "$TMP"/output.log
stdbuf -oL -eL tee -a "$TMP"/output.log <"$TMP"/stdout &
stdbuf -oL -eL tee -a "$TMP"/output.log <"$TMP"/stderr >&2 &

stdbuf -oL -eL "$@" >"$TMP"/stdout 2>"$TMP"/stderr
STATUS="$?"

HOSTNAME=$(hostname --fqdn)
PWD=$(pwd)
USER_ID=$(id -u)
if [ $(id -u) = 0 ]; then
	echo -n "$HOSTNAME $PWD # " >"$TMP"/email.txt
else
	USER_NAME=$(id -un)
	echo -n "$USER_NAME@$HOSTNAME $PWD \$ " >"$TMP"/email.txt
fi

echo "$@" >>"$TMP"/email.txt
echo >>"$TMP"/email.txt
cat "$TMP"/output.log >>"$TMP"/email.txt
echo >>"$TMP"/email.txt
echo "Exit Status: $STATUS" >>"$TMP"/email.txt

cat "$TMP"/email.txt | mail -s "$(hostname --fqdn): command complete" "$EMAIL"

rm -rf "$TMP"
exit "$STATUS"
